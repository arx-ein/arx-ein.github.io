---
import Main from '@/layouts/Main.astro';
import { IconList } from "@/components/IconList";
---

<Main title="Icons" caption="六角柱アイコン総集" larger={true} updated={new Date("2024-08-04")}>
    <div id="icons" class="color-a">
        <p class="text-center">
            不定期にTwitter(&#x1D54F;)のアイコンを色違いにしたりデザインを変えてみたりしていたものの総集編。<br />
            簡単に色違いを生成できる！六角柱アイコンジェネレーターは
            <a href="#generator">こちら</a>
        </p>
        <p class="text-right text-sm">
            画像サイズ:
            <input
                type="range" name="size" class="align-middle" min="6" max="18" step="0.5" value="9"
            >
        </p>
        {IconList.map((g) => (
            <h2>{g.group}</h2>
            <ul class="card-grid grid p-0 gap-4">
                {g.imgs.map((i) => (
                    <li class="">
                    <pre class="
                        m-0 text-sm text-center text-wrap break-all
                        text-green-600 dark:text-green-300
                    ">{i.path}</pre>
                    <pre class="
                        m-0 text-xs text-center text-wrap break-all text-zinc-400
                    ">{i.date}</pre>
                    <img
                        src={`/icons/${
                            (g.dir == undefined) ? i.path : g.dir + "/" + i.path
                        }.${
                            (i.ext == undefined) ? "png" : i.ext
                        }`}
                        height="500" width="500"
                        class="
                            scale-95 hover:scale-100 transition-transform duration-75
                            motion-reduce:transition-none motion-reduce:scale-100
                        "
                    />
                    <p 
                        class="m-0 text-sm text-center" 
                        set:html={i.caption.join("<br />")}
                    />
                </li>
                ))}
            </ul>
        ))}
        <h2 id="generator">六角柱アイコンジェネレーター</h2>
        <p class="text-center">
            2色だけで簡単にあなただけのまいせりしるきアイコンを作れる！
            気軽に遊んでみよう
        </p>
        <div class="text-center">
            <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                viewBox="0 0 132 132" class="inline w-64 mb-2"
            >
                <defs>
                    <radialGradient id="radialGradient1337-4" gradientUnits="userSpaceOnUse"
                        cx="48.9" cy="52.8" fx="48.9" fy="52.8" r="7.7"
                        gradientTransform="matrix(0.427,-0.249,0.827,1.42,17.9,-22.8)"
                    >
                        <stop style="stop-color:#ff0080;stop-opacity:1" offset="0" />
                        <stop style="stop-color:#000000;stop-opacity:1" offset="1" />
                    </radialGradient>
                    <radialGradient id="radialGradient1337" gradientUnits="userSpaceOnUse"
                        cx="48.9" cy="52.8" fx="48.9" fy="52.8" r="7.7"
                        gradientTransform="matrix(0.427,-0.249,0.827,1.42,-15.7,-10.0)"
                    >
                        <stop style="stop-color:#8000ff;stop-opacity:1" offset="0" />
                        <stop style="stop-color:#000000;stop-opacity:1" offset="1" />
                    </radialGradient>
                    <linearGradient id="linearGradient884" gradientUnits="userSpaceOnUse"
                        x1="132.5" y1="23.8" x2="0" y2="108.5"
                    >
                        <stop style="stop-color:#ffffff;stop-opacity:0;" offset="0" />
                        <stop style="stop-color:#ffffff;stop-opacity:0.6;" offset="1" />
                    </linearGradient>
                    <linearGradient id="linearGradient873" gradientUnits="userSpaceOnUse"
                        x1="86.6" y1="94.1" x2="121.4" y2="94.1"
                    >
                        <stop style="stop-color:#ffffff;stop-opacity:0.4;" offset="0" />
                        <stop style="stop-color:#ffffff;stop-opacity:0.7;" offset="1" />
                    </linearGradient>
                    <linearGradient id="linearGradient863" gradientUnits="userSpaceOnUse"
                        x1="19.8" y1="45.2" x2="98.8" y2="45.2"
                    >
                        <stop style="stop-color:#ffffff;stop-opacity:0;" offset="0" />
                        <stop style="stop-color:#ffffff;stop-opacity:0.8;" offset="1" />
                    </linearGradient>
                    <linearGradient id="linearGradient855" gradientUnits="userSpaceOnUse"
                        x1="32.1" y1="106.5" x2="86.6" y2="106.5"
                    >
                        <stop style="stop-color:#000000;stop-opacity:0.1;" offset="0" />
                        <stop style="stop-color:#000000;stop-opacity:0;" offset="1" />
                    </linearGradient>
                    <linearGradient id="linearGradient845" gradientUnits="userSpaceOnUse"
                        x1="32.1" y1="80.8" x2="12.3" y2="132.3"
                    >
                        <stop style="stop-color:#000000;stop-opacity:0.3;" offset="0" />
                        <stop style="stop-color:#000000;stop-opacity:0.15;" offset="1" />
                    </linearGradient>
                </defs>
                <g id="layer1">
                    <rect
                        id="gen_back" style="fill:#0094fc;stroke:none"
                        width="132" height="132" x="0" y="0"
                    />
                    <rect
                        id="rect875" style="fill:url(#linearGradient884);stroke:none"
                        width="132" height="132" x="0" y="0"
                    />
                </g>
                <g id="layer2" style="display:inline">
                    <path id="gen_fore"
                        d="m 47,12.4 -34.7,31.1 v 88.8 h 19.8 54.5 34.7 V 55.9 L 101.6,18.6 Z"
                        style="fill:#00f314;"
                    />
                    <path id="path835"
                        style="display:inline;fill:url(#linearGradient863);stroke:none"
                        d="M 98.8,51.4 73.7,82.5 34.2,76.3 19.8,38.9 45,7.8 84.5,14.1 Z"
                        transform="matrix(1.38,0,0,1,-15.1,4.54)"
                    />
                    <path id="path837"
                        style="fill:url(#linearGradient845);stroke:none"
                        d="M 32.1,132.3 V 80.8 L 12.3,43.5 v 88.8 z"
                    />
                    <path id="path847"
                        style="fill:url(#linearGradient855);stroke:none"
                        d="m 32.1,80.8 v 51.5 h 54.5 l 0,-45.3 z"
                    />
                    <path id="path865"
                        style="fill:url(#linearGradient873);stroke:none"
                        d="m 86.6,87 -0,45.3 H 121.4 V 55.9 Z"
                    />
                </g>
                <g id="layer3">
                    <path id="path886"
                        style="fill:none;stroke:url(#radialGradient1337);stroke-width:2.6;stroke-linecap:round;"
                        d="M 42.5,42 55.2,63.7"
                    />
                    <path id="path886-5"
                        style="fill:none;stroke:url(#radialGradient1337-4);stroke-width:2.6;stroke-linecap:round;"
                        d="M 76.1,29.2 88.7,50.9"
                    />
                    <path id="path886-9-9"
                        style="fill:none;stroke:#000000;stroke-width:2.6;stroke-linecap:round;"
                        d="M 83.8,73.6 77.6,73.6"
                    />
                </g>
            </svg>
            <br />
            <div id="ctn_gen" class="inline-flex w-64 justify-evenly">
                <div><input type="color" name="backcolor" value="#0094fc" /></div>
                <div><input type="color" name="forecolor" value="#00f314" /></div>
                <button name="reset">
                    <svg class="lucide lucide-rotate-ccw stroke-fore dark:stroke-fore stroke-2"
                    viewBox="0 0 24 24">
                        <path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"/>
                        <path d="M3 3v5h5"/>
                    </svg>
                </button>
                <button name="random">
                    <svg class="lucide lucide-shuffle stroke-fore dark:stroke-fore stroke-2"
                        viewBox="0 0 24 24">
                        <path d="M2 18h1.4c1.3 0 2.5-.6 3.3-1.7l6.1-8.6c.7-1.1 2-1.7 3.3-1.7H22"/>
                        <path d="m18 2 4 4-4 4"/>
                        <path d="M2 6h1.9c1.5 0 2.9.9 3.6 2.2"/>
                        <path d="M22 18h-5.9c-1.3 0-2.6-.7-3.3-1.8l-.5-.8"/>
                        <path d="m18 14 4 4-4 4"/>
                    </svg>
                </button>
            </div>
        </div>
    </div>
</Main>
<style>
    @reference "tailwindcss";
    div#icons :global(a) { @apply underline }
    h2 { @apply mt-6 mb-1 p-2 text-2xl font-bold text-zinc-100 bg-lime-700 }
    ul.card-grid {
        grid-template-columns: repeat(auto-fit, 9rem);
    }
    #ctn_gen > * {
        height: calc(3rem * 0.875);
        width: 3rem;
        clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);
        @apply inline-block overflow-hidden scale-90 hover:scale-100
            transition-transform duration-100 motion-reduce:transition-none
    }
    #ctn_gen button {
        @apply bg-zinc-100 text-center;
        svg {
            @apply inline size-6
        }
    }
    input[type="color"] {
        @apply border-0 p-0 cursor-pointer;
        width: 200%;
        height: 200%;
        transform: translate(-25%, -25%);
    }
</style>
<script>
    const sizeInput = document.getElementsByName('size')[0] as HTMLInputElement;
    const gridElem = document.getElementsByClassName("card-grid")!;
    sizeInput.addEventListener('input', () => {
        Array.from(gridElem).forEach(elem => {
            const ul = elem as HTMLUListElement;
            ul.style.gridTemplateColumns = `repeat(auto-fit, ${sizeInput.value}rem)`;
        });
    });
    
    const foreInput = document.getElementsByName('forecolor')[0] as HTMLInputElement;
    const backInput = document.getElementsByName('backcolor')[0] as HTMLInputElement;
    const resetButton = document.getElementsByName("reset")[0] as HTMLInputElement;
    const randButton = document.getElementsByName("random")[0] as HTMLInputElement;
    const foreElem = document.getElementById("gen_fore")!;
    const backElem = document.getElementById("gen_back")!;

    foreInput.addEventListener("input", () => {
        foreElem.style.fill = foreInput.value;
    });
    backInput.addEventListener('input', () => {
        backElem.style.fill = backInput.value;
    });
    resetButton.addEventListener("click", () => {
        const defValue = {back: "#0094fc", fore: "#00f314"}
        backInput.value = defValue.back;
        backElem.style.fill = defValue.back;
        foreInput.value = defValue.fore;
        foreElem.style.fill = defValue.fore;
    })
    randButton.addEventListener("click", () => {
        const randColor = () => {
            return "#" + Array.from(Array(3)).map(
                () => Math.floor(Math.random() * 255).toString(16).padStart(2, "0")
            ).join("");
        }
        const randValue = {back: randColor(), fore: randColor()}
        backInput.value = randValue.back;
        backElem.style.fill = randValue.back;
        foreInput.value = randValue.fore;
        foreElem.style.fill = randValue.fore;
    })
</script>
